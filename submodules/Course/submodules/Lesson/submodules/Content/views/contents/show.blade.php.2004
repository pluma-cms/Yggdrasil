@extends("Theme::layouts.course")

@section("head-title", "{$resource->course->title} &#x276f; {$resource->lesson->title} &#x276f; {$resource->title}")

@push('post-css')
    <link rel="manifest" href="{{ url('manifest.json') }}">
@endpush

@section("content")
    <v-navigation-drawer
        temporary
        v-model="drawer.model"
        light
        fixed
    >
        <v-list class="pa-1">
            <v-list-tile avatar>
                <v-list-tile-content>
                    <v-list-tile-title><strong>{{ $resource->lesson->title }}</strong></v-list-tile-title>
                </v-list-tile-content>
            </v-list-tile>
        </v-list>
        <v-divider></v-divider>
        <v-list>
            <v-list-tile :href="item.url" v-for="(item, i) in drawer.items" :key="i" ripple :class="{'primary white--text': (resource.id == item.id)}">
                <v-list-tile-action>
                    <v-icon left v-if="item.completed">check</v-icon>
                    <v-icon left v-else-if="item.current">play_circle_outline</v-icon>
                    <v-icon left v-else>lock</v-icon>
                </v-list-tile-action>
                <v-list-tile-content>
                    <v-list-tile-title v-html="item.title"></v-list-tile-title>
                </v-list-tile-content>
            </v-list-tile>
        </v-list>
    </v-navigation-drawer>
    <v-toolbar dark extended class="text-xs-center indigo elevation-0">
        <v-layout wrap justify-space-around align-center hidden-xs-only>
            <template v-if="previous">
                <v-btn
                    v-if="previous"
                    :href="previous.url"
                    ripple
                    flat
                >
                    <v-icon left dark v-if="previous.completed">check</v-icon>
                    <v-icon left dark v-else-if="previous.locked">lock</v-icon>
                    <v-icon left dark v-else-if="previous.current">play_circle_outline</v-icon>
                    <v-icon left dark v-else>arrow_back</v-icon>
                    <span v-html="previous.title"></span>
                </v-btn>
            </template>
            <v-btn v-else disabled flat><span v-html="resource.lesson.title"></span></v-btn>

            <span class="caption">{{ "$resource->order/{$resource->lesson->contents->count()}" }}</span>

            <template v-if="next">
                <v-btn
                    v-if="next"
                    :href="next.url"
                    ripple
                    flat
                >
                    <span v-html="next.title"></span>
                    <v-icon right dark v-if="next.completed">check</v-icon>
                    <v-icon right dark v-else-if="next.locked">lock</v-icon>
                    <v-icon right dark v-else-if="next.current">play_circle_outline</v-icon>
                    <v-icon right dark v-else>arrow_forward</v-icon>
                </v-btn>
            </template>
            <v-btn v-else disabled flat>{{ __('End of Lesson') }}</v-btn>
        </v-layout>
    </v-toolbar>
    <v-container grid-list-lg>
        <v-layout row wrap>
            <v-flex xs12>
                <v-btn style="z-index: 2" fab bottom left primary dark medium fixed v-tooltip:right="{html: 'Table of Contents'}" @click.stop="drawer.model = !drawer.model"><v-icon>menu</v-icon></v-btn>
                <v-card id="interactive-container" class="card--flex-toolbar card--filed-on-top">
                    <v-toolbar card dense class="transparent">
                        <v-toolbar-title class="title">{{ $resource->title }}</v-toolbar-title>
                        <v-spacer></v-spacer>
                        <v-dialog max-width="90vw" width="80vw">
                            <v-btn icon slot="activator" v-tooltip:left="{html: 'Show Description'}">
                                <v-icon>info</v-icon>
                            </v-btn>
                            <v-card>
                                <v-card-title>
                                    <span class="headline">{{ $resource->title }}</span>
                                </v-card-title>
                                <v-card-text class="grey--text text--darken-2">
                                    {!! $resource->body ? $resource->body : __('No description available') !!}
                                </v-card-text>
                                <v-card-actions>
                                    <v-spacer></v-spacer>
                                </v-card-actions>
                            </v-card>
                        </v-dialog>
                        <v-btn icon @click="goFullscreen"><v-icon>@{{ fullscreen.model ? 'fullscreen' : 'fullscreen_exit' }}</v-icon></v-btn>
                        <v-dialog max-width="90vw" width="80vw">
                            <v-btn slot="activator" icon v-tooltip:left="{html: 'Close this window'}"><v-icon>close</v-icon></v-btn>
                            <v-card>
                                <v-card-title>
                                    <span class="headline">{{ __("Close this window?") }}</span>
                                </v-card-title>
                                <v-card-text>
                                    <p>{!! __("You are about to close this entire window. The application will try and save you're progress but it is <strong>not guaranteed</strong>.") !!}</p>
                                    <p>{{ __("Do you want to proceed? Click anywhere to cancel.") }}</p>
                                </v-card-text>
                                <v-card-actions>
                                    <v-spacer></v-spacer>
                                    <v-btn primary class="elevation-1" @click="lms().exit()">Try Save &amp; Exit</v-btn>
                                </v-card-actions>
                            </v-card>
                        </v-dialog>
                    </v-toolbar>
                    <v-alert
                        icon="check"
                        class="success ma-0"
                        dismissible
                        v-model="resource.completed"
                        transition="slide-y-transition"
                        :timeout="2000"
                        style="z-index: 2"
                    >
                        <v-card style="margin-bottom: -2rem" class="elevation-1 mb--2">
                            <v-card-text class="grey--text text--darken-1 text-xs-center">{{ __("You have already finished this part of the lesson. Though no data will be recorded, you may still view this lesson again.") }}</v-card-text>
                        </v-card>
                    </v-alert>

                    <template v-if="! resource.lesson.course.enrolled">
                        <div class="text-xs-center">
                            <img src="{{ assets('course/images/no-courses.png') }}" alt="{{ __('Not enrolled') }}">
                        </div>
                        <v-container fill-height class="pa-0 pb-4">
                            <v-layout fill-height wrap column>
                                <v-spacer></v-spacer>
                                <div class="subheading text-xs-center grey--text">
                                    <div class="mb-3 headline">{{ __("You are not enrolled to this course.") }}</div>
                                    <v-card-actions>
                                        <v-spacer></v-spacer>
                                        <v-btn class="primary primary--text" outline ripple @click="">{{ __("Request Course") }}</v-btn>
                                        <form v-if="!resource.lesson.course.bookmarked" action="{{ route("courses.bookmark.bookmark", $resource->lesson->course->id) }}" method="POST">
                                            {{ csrf_field() }}
                                            <v-btn type="submit" class="red red--text" outline ripple><v-icon left>bookmark_outline</v-icon>{{ __("Bookmark") }}</v-btn>
                                        </form>
                                        <v-spacer></v-spacer>
                                    </v-card-actions>
                                </div>
                                <v-spacer></v-spacer>
                            </v-layout>
                        </v-container>
                    </template>
                    <template v-else>
                        <v-card flat class="grey--text text--darken-1" v-if="resource.locked">
                            <v-card-media height="480px">
                                <v-container fill-height fluid>
                                    <v-layout fill-height wrap column>
                                        <v-spacer></v-spacer>
                                        <v-icon class="display-4">lock</v-icon>
                                        <div class="pa-4 subheading text-xs-center">{{ __('This part is still locked. Please finish the previous interaction.') }}</div>
                                        <v-card-actions class="pa-0">
                                            <v-spacer></v-spacer>
                                            <v-btn dark class="indigo" ripple :href="previous.url"><v-icon left>arrow_back</v-icon>{{ __('Go to Previous') }}</v-btn>
                                            <v-spacer></v-spacer>
                                        </v-card-actions>
                                        <v-spacer></v-spacer>
                                    </v-layout>
                                </v-container>
                            </v-card-media>
                        </v-card>
                        <template v-else>
                            <v-card v-if="! course.started" flat class="grey--text text--darken-1">
                                <v-card-media height="480px">
                                    <v-container fill-height fluid>
                                        <v-layout fill-height wrap column>
                                            {!! $resource->body !!}
                                            <v-spacer></v-spacer>
                                            <v-card-actions class="pa-0">
                                                <v-spacer></v-spacer>
                                                <v-btn dark class="indigo" @click="course.started = !course.started">
                                                    <v-icon left>play_circle_outline</v-icon>
                                                    <template v-if="resource.incomplete">{{ __('Continue') }}</template>
                                                    <template v-else-if="resource.completed">{{ __('Play Again') }}</template>
                                                    <template v-else>{{ __('Start') }}</template>
                                                </v-btn>
                                            </v-card-actions>
                                        </v-layout>
                                    </v-container>
                                </v-card-media>
                            </v-card>
                        </template>
                        <v-fade-transition>
                            <template v-if="course.started">
                                <div>
                                    {{-- {!! $resource->html !!} --}}
                                    <object
                                        class="interactive-content"
                                        width="100%" height="640px" data="{{ $resource->interactive }}"
                                    >
                                        <embed src="{{ $resource->interactive }}">
                                    </object>

                                    <v-dialog v-model="messagebox.model" width="60vw" persistent>
                                        <v-card flat tile class="text-xs-center">
                                            <v-icon class="display-4 success--text">check</v-icon>
                                            <v-card-text class="headline success--text text-xs-center">{{ __("Completed") }}</v-card-text>
                                            <v-card-text class="grey--text text--darken-1">
                                                {{ __("You have finished this Interaction. Click below to continue.") }}
                                            </v-card-text>
                                            <v-card-actions>
                                                <v-spacer></v-spacer>
                                                <v-btn :disabled="messagebox.btnDiabled" primary @click="messagebox.model = !messagebox.model">{{ __("Okay") }}</v-btn>
                                                <v-spacer></v-spacer>
                                            </v-card-actions>
                                        </v-card>
                                    </v-dialog>
                                </div>
                            </template>
                        </v-fade-transition>
                    </template>

                </v-card>
            </v-flex>
        </v-layout>
    </v-container>
@endsection

@section("back-to-top", "")

@push('css')
    <style>
        .lms.lms-fullscreen .card:-webkit-full-screen,
        .lms.lms-fullscreen .card:-moz-full-screen
        .lms.lms-fullscreen .card:fullscreen {
            max-height: 100vh;
            overflow-y: auto;
            cursor: zoom-out;
            /*overflow: hidden;*/
        }

        .lms.lms-fullscreen .interactive-content,
        .lms.lms-fullscreen #interactive-content .card__media {
            max-height: calc(100vh - 48px);
        }
        .interactive-content {
            width: 100%;
            max-height: 100vh;
            display: block;
            text-align: center;
            margin: 0 auto;
        }
    </style>
@endpush

@push('pre-scripts')
    <script src="{{ assets('frontier/vendors/vue/resource/vue-resource.min.js') }}"></script>
    {{-- <script src="{{ assets('course/scorm/scormdriver.js') }}"></script> --}}
    {{-- <script src="{{ assets('course/scorm/scorm.6.0.0.js') }}"></script> --}}
    {{-- <script src="{{ assets('course/scorm/scorm.js') }}"></script> --}}
    <script src="{{ assets('course/scorm/scorm.adapter.api-1.2-2004.js') }}"></script>
    <script>
        Vue.use(VueResource);

        mixins.push({
            data () {
                return {
                    fullscreen: {
                        model: true
                    },
                    drawer: {
                        model: false,
                        items: {!! $contents !!}
                    },
                    messagebox: {
                        model: false,
                        type: 'success',
                        exit: false,
                        btnDiabled: false,
                    },
                    course: {
                        started: false,
                    },
                    resource: {!! json_encode($resource) !!},
                    previous: {!! json_encode($resource->previous) !!},
                    next: {!! json_encode($resource->next) !!},
                    scorm: null,
                    lesson_status_completed: false,
                }
            },
            methods: {
                goFullscreen() {
                    this.fullscreen.model = !this.fullscreen.model;
                    window.API.stage.fullscreen(document.querySelector('#interactive-container'));
                    // window.API.stage.fullscreen(document.querySelector(".interactive-content"));
                },


                lms () {
                    let self = this

                    return {
                        exit () {
                            self.messagebox.btnDiabled = !self.messagebox.btnDiabled;
                            window.API.Terminate('');
                            // window.close();
                        },

                        get () {
                            window.API.on('BeforeInitialize', function (cache) {
                                // Start getting the initial values from the .
                                // This is done in the custom (non-SCORM) function BeforeInitialize, because the request
                                // is asynchronous.
                                if (! self.resource.locked) {
                                    self.$http.post('{{ route('api.scorm.lmsinitialize', [$resource->lesson->course->id, $resource->id]) }}', {_token: '{{ csrf_token() }}'}).then(response => {
                                        window.API.Cache().setMultiple(response.body);
                                        window.API.Cache().set("cmi.core.student_name", '{{ user()->displayname }}');
                                        window.API.Cache().set("cmi.core.student_id", '{{ user()->id }}');
                                    });
                                }
                            });

                            // Initialize the API with options.
                            window.API.init({
                                GET: '{{ route('api.scorm.lmsgetvalue', [$resource->lesson->course->id, $resource->id]) }}',
                                POST: '{{ route('api.scorm.lmssetvalue', [$resource->lesson->course->id, $resource->id]) }}',
                                INIT: '{{ route('api.scorm.lmsinitialize', [$resource->lesson->course->id, $resource->id]) }}',
                                COMMIT: '{{ route('api.scorm.lmscommit', [$resource->lesson->course->id, $resource->id]) }}',
                                FINISH: '{{ route('api.scorm.lmsfinish', [$resource->lesson->course->id, $resource->id]) }}',
                                _token: '{{ csrf_token() }}',
                                done: false,
                                debug: true,
                            });
                        },
                        mounted () {
                            // window.API.setOptions({
                            //     GET: '{{ route('api.scorm.lmsgetvalue', [$resource->lesson->course->id, $resource->id]) }}',
                            //     SET: '{{ route('api.scorm.lmssetvalue', [$resource->lesson->course->id, $resource->id]) }}',
                            //     INIT: '{{ route('api.scorm.lmsinitialize', [$resource->lesson->course->id, $resource->id]) }}',
                            //     COMMIT: '{{ route('api.scorm.lmscommit', [$resource->lesson->course->id, $resource->id]) }}',
                            //     FINISH: '{{ route('api.scorm.lmsfinish', [$resource->lesson->course->id, $resource->id]) }}',
                            //     _token: '{{ csrf_token() }}',
                            //     // debug: true,
                            // });

                            window.API.on('Initialize', function (dummyString, cache) {
                               // window.API.Commit('');
                            })

                            window.API.on('SetValue', function (varname, value, cache) {
                                console.log(cache);
                            });
                            window.API.on('GetValue', function (varname, cache) {
                                // console.log("CACHED-----", JSON.parse(JSON.stringify(cache)));
                            });

                            window.API.on('Commit', function (string, cache, query) {
                                console.log("Commit", JSON.parse(JSON.stringify(cache)));
                                setTimeout(function () {
                                    self.$http.post(window.API.options.COMMIT, cache).then(response => {
                                        if (response.status === 200) {
                                            // self.messagebox.model = true;
                                            return "true";
                                        }
                                        return response.bodyText;
                                    });
                                }, 999)
                            });

                            window.API.on('Terminate', function (string, cache, query) {
                                self.$http.post(window.API.options.FINISH, {_token: '{{ csrf_token() }}'}).then(response => {
                                    self.drawer.items = response.body;
                                    for (var i = self.drawer.items.length - 1; i >= 0; i--) {
                                        let current  = self.drawer.items[i];
                                        if (current.id === self.resource.id) {
                                            self.next.current = true;
                                        }
                                    }
                                });
                            });

                            window.API.on('VideoEnded', function (video, e) {
                                if (window.API.Cache().set("cmi.core.lesson_status", 'completed')) {
                                    window.API.Commit('');
                                    window.API.Terminate('');
                                }
                            });
                            // screen.orientation && screen.orientation.lock('landscape');
                        },

                        listen () {
                        //     window.API.on('Terminate', function() {
                        //         // window.API.GetValue("");
                        //         console.log('[]', "Terminateed")

                        //         return "true";
                        //     });

                        //     window.API.on("GetValue", function (cmiElement) {
                        //         console.log('[]', "GetValue")
                        //         console.info(cmiElement);
                        //         // ret =
                        //         // return ret;
                        //     });

                        //     window.API.on("Commit", function () {
                        //         window.API.GetValue("");
                        //         return "true";
                        //     })
                        }
                    }
                },
            },

            mounted () {
                this.lms().get();
                if (this.course.started) {
                    this.lms().mounted();
                    // this.lms().listen();
                }
            },

            watch: {
                'course.started': function (value) {
                    if (value) {
                        this.lms().mounted();
                        this.lms().listen();
                    }
                },
                'window.API.done': function (value) {
                    console.log('value', value);
                }

            }
        })
    </script>
@endpush
